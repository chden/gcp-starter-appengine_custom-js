steps:
- name: 'gcr.io/cloud-builders/npm:node-12.18.3'
  id: 'install'
  args: ['ci']

# - name: 'gcr.io/cloud-builders/npm:node-12.18.3'
#   id: 'lint'
#   waitFor:
#   - 'install'
#   args: ['run', 'lint']

# - name: 'gcr.io/cloud-builders/npm:node-12.18.3'
#   id: 'test'
#   waitFor:
#   - 'install'
#   args: ['run','test']

# - name: 'gcr.io/cloud-builders/docker'
#   id: 'build'
#   waitFor:
#   - 'test'
#   - 'lint'
#   args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/${_APP_NAME}-${_APP_SERVICE}:${_APP_VERSION}', '.' ]

# - name: 'gcr.io/cloud-builders/docker'
#   id: 'push'
#   waitFor:
#   - 'build'
#   args: [ 'push', 'gcr.io/$PROJECT_ID/${_APP_NAME}-${_APP_SERVICE}:${_APP_VERSION}' ]

# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 'deploy'
#   waitFor:
#   - 'push'
#   entrypoint: /bin/bash
#   args:
#     - -c
#     - |
#       gcloud app deploy app.yaml \
#         --image-url "gcr.io/${PROJECT_ID}/${_APP_NAME}-${_APP_SERVICE}:${_APP_VERSION}" \
#         --no-promote \
#         --version $(echo "${_APP_VERSION}" | sed s/[^a-z0-9-]/-/g)

- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-env'
  waitFor:
    - 'install'
  # waitFor:
  #   - 'deploy'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      export build_version=$(echo ${_APP_VERSION} | sed s/[^a-z0-9-]/-/g) &&
      export build_url="$(gcloud app versions list --uri --filter "service:${_APP_SERVICE} version.id=${build_version}")" &&

      # write vars to a file
      env | grep '^build_' > /workspace/build_vars

- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-env-token'
  waitFor:
    - 'get-env'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      # read variables from file
      . /workspace/build_vars &&

      #  518565078376-d7im0aqlr7g8lq7pnmcua845glhol1bj.apps.googleusercontent.com

      echo ${_APP_NAME} &&

      echo "Build URL $build_url" &&
      echo "Access Token $(gcloud auth print-access-token)" &&

      curl -H "Content-Type: application/x-www-form-urlencoded" -d "access_token=$(gcloud auth application-default print-access-token)" https://www.googleapis.com/oauth2/v1/tokeninfo &&

      curl -H "Content-Type: application/x-www-form-urlencoded" -d "access_token=$(gcloud auth print-access-token)" https://www.googleapis.com/oauth2/v1/tokeninfo &&
      projectNumber="`gcloud projects describe $PROJECT_ID --format='value(projectNumber)'`" &&
      echo "Project number: $projectNumber" &&
      export build_token=`curl -s -H "content-type: application/json" \
        -H "Authorization: Bearer $(gcloud auth print-access-token)" \
        -d "{\"audience\": \"https://chden-gae.ew.r.appspot.com/\"}" \
        "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${projectNumber}-compute@developer.gserviceaccount.com:generateIdToken" |
        grep 'token' |
        cut -d'"' -f4` &&
      # export build_token=`curl -s -H "content-type: application/json" \
      #   -H "Authorization: Bearer $(gcloud auth print-access-token)" \
      #   -d "{\"audience\": \"https://chden-gae.ew.r.appspot.com/\"}" \
      #   "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${projectNumber}@cloudbuild.gserviceaccount.com:generateIdToken" |
      #   grep 'token' |
      #   cut -d'"' -f4` &&
      
      echo "Build token: $build_token" &&

      # append vars to a file
      env | grep '^build_' >> /workspace/build_vars

- name: 'gcr.io/cloud-builders/npm:node-12.18.3'
  id: 'system-test'
  waitFor:
    - 'get-env-token'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      # read variables from file
      . /workspace/build_vars &&

      echo ${_APP_NAME} &&
      echo "asdf $build_url" &&
      echo "Build token: $build_token"

      # bearer_token="$build_token" base_url="$build_url" npm run test:system

# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 'promote'
#   waitFor:
#     - 'system-test'
#   entrypoint: /bin/bash
#   args:
#     - -c
#     - |
#       # read variables from file
#       . /workspace/build_vars &&

#       gcloud app services set-traffic ${_APP_SERVICE} --splits "${build_version}=1"


# Uncomment the following step if you want to stop all versions that receive no traffic.
# But be aware that the step before ('promote') sets all traffic to the currently deployed version.

# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 'stop-versions-notraffic'
#   waitFor:
#     - 'promote'
#   entrypoint: /bin/bash
#   args:
#     - -c
#     - |
#       gcloud app versions stop \
#       $(gcloud app versions list --service ${_APP_SERVICE} --filter "TRAFFIC_SPLIT<=0 AND NOT SERVING_STATUS=STOPPED" --format "get(VERSION.ID)")